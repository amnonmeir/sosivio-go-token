// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementClient is the client API for UserManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementClient interface {
	CreateMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (UserManagement_CreateMsgClient, error)
}

type userManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementClient(cc grpc.ClientConnInterface) UserManagementClient {
	return &userManagementClient{cc}
}

func (c *userManagementClient) CreateMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (UserManagement_CreateMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagement_ServiceDesc.Streams[0], "/usermgmt.UserManagement/CreateMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementCreateMsgClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserManagement_CreateMsgClient interface {
	Recv() (*Returned, error)
	grpc.ClientStream
}

type userManagementCreateMsgClient struct {
	grpc.ClientStream
}

func (x *userManagementCreateMsgClient) Recv() (*Returned, error) {
	m := new(Returned)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserManagementServer is the server API for UserManagement service.
// All implementations must embed UnimplementedUserManagementServer
// for forward compatibility
type UserManagementServer interface {
	CreateMsg(*Msg, UserManagement_CreateMsgServer) error
	mustEmbedUnimplementedUserManagementServer()
}

// UnimplementedUserManagementServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServer struct {
}

func (UnimplementedUserManagementServer) CreateMsg(*Msg, UserManagement_CreateMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMsg not implemented")
}
func (UnimplementedUserManagementServer) mustEmbedUnimplementedUserManagementServer() {}

// UnsafeUserManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServer will
// result in compilation errors.
type UnsafeUserManagementServer interface {
	mustEmbedUnimplementedUserManagementServer()
}

func RegisterUserManagementServer(s grpc.ServiceRegistrar, srv UserManagementServer) {
	s.RegisterService(&UserManagement_ServiceDesc, srv)
}

func _UserManagement_CreateMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Msg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserManagementServer).CreateMsg(m, &userManagementCreateMsgServer{stream})
}

type UserManagement_CreateMsgServer interface {
	Send(*Returned) error
	grpc.ServerStream
}

type userManagementCreateMsgServer struct {
	grpc.ServerStream
}

func (x *userManagementCreateMsgServer) Send(m *Returned) error {
	return x.ServerStream.SendMsg(m)
}

// UserManagement_ServiceDesc is the grpc.ServiceDesc for UserManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.UserManagement",
	HandlerType: (*UserManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMsg",
			Handler:       _UserManagement_CreateMsg_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "usermgmt/usermgmt.proto",
}
